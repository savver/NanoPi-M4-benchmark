root@AcerD10:/usr/local/src/tinymembench# ./tinymembench 

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3680.8 MB/s (2.0%)
 C copy backwards (32 byte blocks)                    :   3677.8 MB/s (0.7%)
 C copy backwards (64 byte blocks)                    :   3680.7 MB/s (0.6%)
 C copy                                               :   3685.2 MB/s (1.2%)
 C copy prefetched (32 bytes step)                    :   3670.8 MB/s (0.6%)
 C copy prefetched (64 bytes step)                    :   3670.8 MB/s (0.6%)
 C 2-pass copy                                        :   3698.5 MB/s (0.6%)
 C 2-pass copy prefetched (32 bytes step)             :   3685.7 MB/s (0.5%)
 C 2-pass copy prefetched (64 bytes step)             :   3689.1 MB/s (0.6%)
 C fill                                               :   5529.6 MB/s (0.8%)
 C fill (shuffle within 16 byte blocks)               :   5527.3 MB/s (0.5%)
 C fill (shuffle within 32 byte blocks)               :   5528.9 MB/s (0.5%)
 C fill (shuffle within 64 byte blocks)               :   5527.1 MB/s (0.6%)
 ---
 standard memcpy                                      :   5375.6 MB/s (0.6%)
 standard memset                                      :  12028.6 MB/s (0.9%)
 ---
 MOVSB copy                                           :   5014.0 MB/s (0.4%)
 MOVSD copy                                           :   4956.4 MB/s (1.9%)
 SSE2 copy                                            :   3683.3 MB/s (0.7%)
 SSE2 nontemporal copy                                :   5336.4 MB/s (0.5%)
 SSE2 copy prefetched (32 bytes step)                 :   3663.2 MB/s (0.6%)
 SSE2 copy prefetched (64 bytes step)                 :   3664.8 MB/s (0.6%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   5348.0 MB/s (0.4%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   5346.7 MB/s (0.6%)
 SSE2 2-pass copy                                     :   3673.3 MB/s (0.8%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   3657.5 MB/s (1.0%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   3655.9 MB/s (0.5%)
 SSE2 2-pass nontemporal copy                         :   2820.2 MB/s (0.7%)
 SSE2 fill                                            :   5534.1 MB/s (0.6%)
 SSE2 nontemporal fill                                :  12122.2 MB/s (0.7%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 MOVSD copy (from framebuffer)                        :    112.0 MB/s (0.3%)
 MOVSD 2-pass copy (from framebuffer)                 :    116.2 MB/s (0.2%)
 SSE2 copy (from framebuffer)                         :    149.1 MB/s
 SSE2 2-pass copy (from framebuffer)                  :    146.7 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
	  1024 :    0.0 ns          /     0.0 ns 
	  2048 :    0.0 ns          /     0.0 ns 
	  4096 :    0.0 ns          /     0.0 ns 
	  8192 :    0.0 ns          /     0.0 ns 
	 16384 :    0.0 ns          /     0.0 ns 
	 32768 :    0.0 ns          /     0.0 ns 
	 65536 :    1.4 ns          /     1.8 ns 
	131072 :    2.1 ns          /     2.5 ns 
	262144 :    2.5 ns          /     2.8 ns 
	524288 :    7.2 ns          /     9.0 ns 
   1048576 :    9.6 ns          /    11.1 ns 
   2097152 :   11.0 ns          /    11.9 ns 
   4194304 :   35.9 ns          /    52.9 ns 
   8388608 :   59.1 ns          /    79.0 ns 
  16777216 :   71.0 ns          /    88.0 ns 
  33554432 :   77.4 ns          /    92.7 ns 
  67108864 :   82.3 ns          /    98.3 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
	  1024 :    0.0 ns          /     0.0 ns 
	  2048 :    0.0 ns          /     0.0 ns 
	  4096 :    0.0 ns          /     0.0 ns 
	  8192 :    0.0 ns          /     0.0 ns 
	 16384 :    0.0 ns          /     0.0 ns 
	 32768 :    0.0 ns          /     0.0 ns 
	 65536 :    1.4 ns          /     1.8 ns 
	131072 :    2.1 ns          /     2.5 ns 
	262144 :    2.5 ns          /     2.8 ns 
	524288 :    5.8 ns          /     7.7 ns 
   1048576 :    7.5 ns          /     9.0 ns 
   2097152 :    8.6 ns          /     9.4 ns 
   4194304 :   30.4 ns          /    44.3 ns 
   8388608 :   51.5 ns          /    67.9 ns 
  16777216 :   61.8 ns          /    75.1 ns 
  33554432 :   66.9 ns          /    77.2 ns 
  67108864 :   69.5 ns          /    78.1 ns 